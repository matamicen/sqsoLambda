-- --------------------------------------------------------------------------------
-- Routine DDL
-- Note: comments before and after the routine body will not be stored by the server
-- --------------------------------------------------------------------------------
DELIMITER $$

CREATE DEFINER=`sqso`@`%` PROCEDURE `qraqsofeedget2`(IN QRA varchar(45))
BEGIN


DROP TEMPORARY TABLE IF EXISTS t_qsos;

CREATE TEMPORARY TABLE t_qsos (
select * from 
#Get all the post where the current user is owner.  
(SELECT qsos.* from qsos
				INNER JOIN
			qsos_qras ON qsos_qras.idqso = qsos.idqsos
				inner join qras 
				on qras.idqras = qsos_qras.idqra
				WHERE qsos.datetime <=NOW() 
					and qras.qra= QRA			
					and deleted = 0 order by datetime desc LIMIT 50 ) 
 as t_qsos
	 );

DROP TEMPORARY TABLE IF EXISTS t_qsos1;
DROP TEMPORARY TABLE IF EXISTS t_qsos2;
CREATE TEMPORARY TABLE t_qsos1 (select * from t_qsos);
CREATE TEMPORARY TABLE t_qsos2 (select * from t_qsos);

#Get QSO Data and QRA Owner Detail
SELECT 	
    t_qsos1.*,
    qras.idqras,
    qras.qra,
    qras.profilepic,    
	qras.avatarpic
FROM
    qras
        INNER JOIN
    qsos_qras ON qsos_qras.idqra = qras.idqras
        INNER JOIN
    t_qsos1 as t_qsos1 ON t_qsos1.idqsos = qsos_qras.idqso
WHERE
    isOwner = 1 

order by idqso desc;

#QRAS
(SELECT 
    idqso, qras.idqras, qras.qra, qras.profilepic, qras.avatarpic
FROM
    qras
        INNER JOIN
    qsos_qras ON qsos_qras.idqra = qras.idqras
        INNER JOIN
    t_qsos1 as t_qsos1 ON t_qsos1.idqsos = qsos_qras.idqso
WHERE
    isOwner = 0
and qras.disabled = 0
order by idqsos) UNION (SELECT 
    idqso, qras.idqras, qras.qra, qras.profilepic, qras.avatarpic
FROM
    qras
        INNER JOIN
    qsos_qras ON qsos_qras.idqra = qras.idqras
        INNER JOIN
    t_qsos2 as t_qsos2 ON t_qsos2.idqso_shared = qsos_qras.idqso
WHERE
    isOwner = 0
and qras.disabled = 0
order by idqsos);

    #Comments
(SELECT 
    qsos_comments . *, qras.idqras, qras.qra, qras.profilepic, qras.avatarpic
from
    qsos_comments
        inner join
    t_qsos1 as t_qsos1 ON t_qsos1.idqsos = qsos_comments.idqso
        inner join
    qras ON qsos_comments.idqra = qras.idqras
where
    qsos_comments.deleted = 0
and qras.disabled = 0
order by idqso) UNION (
	SELECT 
    qsos_comments . *, qras.idqras, qras.qra, qras.profilepic, qras.avatarpic
from
    qsos_comments
        inner join
    t_qsos2 as t_qsos2 ON t_qsos2.idqso_shared = qsos_comments.idqso
        inner join
    qras ON qsos_comments.idqra = qras.idqras
where
    qsos_comments.deleted = 0
and qras.disabled = 0
order by idqso);

#Likes 
(SELECT 
    qsos_likes.*
from
    qsos_likes
        inner join
    t_qsos1 as t_qsos1 ON t_qsos1.idqsos = qsos_likes.idqso
order by idqso) UNION (SELECT 
    qsos_likes.*
from
    qsos_likes
        inner join
    t_qsos2 as t_qsos2 ON t_qsos2.idqso_shared = qsos_likes.idqso
order by idqso);

#Media
(SELECT 
    qsos_media.*
from
    qsos_media
        inner join
    t_qsos1 as t_qsos1 ON t_qsos1.idqsos = qsos_media.idqso
where
    qsos_media.deleted = 0
order by idqso) UNION (SELECT 
    qsos_media.*
from
    qsos_media
        inner join
    t_qsos2 as t_qsos2 ON t_qsos2.idqso_shared = qsos_media.idqso
where
    qsos_media.deleted = 0
order by idqso)
;

#QSO Original with QRA Owner Data
SELECT 	
    qsos.*,
    qras.idqras,
    qras.qra,
    qras.profilepic,
	qras.avatarpic
 
FROM
    qras
        INNER JOIN
    qsos_qras ON qsos_qras.idqra = qras.idqras
        INNER JOIN	
    t_qsos2 as t_qsos2 ON t_qsos2.idqso_SHARED = qsos_qras.idqso
		INNER JOIN 
	qsos on qsos.idqsos = t_qsos2.idqso_shared
WHERE
    isOwner = 1
and qras.disabled = 0
order by idqsos;
#Links
(SELECT 
    qsos_links.*
from
    qsos_links
        inner join
    t_qsos1 as t_qsos1 ON t_qsos1.idqsos = qsos_links.idqso  
order by idqso) UNION (SELECT 
   qsos_links.*
from
    qsos_links
        inner join
    t_qsos2 as t_qsos2 ON t_qsos2.idqso_shared = qsos_links.idqso
order by idqso)
;                

END